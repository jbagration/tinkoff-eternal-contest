/*У Кати насыщенный день на работе. Ей надо передать n разных договоров коллегам. Все встре- чи происходят на разных этажах, а между этажами можно перемещаться только по лестничным пролетам — считается, что это улучшает физическую форму сотрудников. Прохождение каждого пролета занимает ровно ﻿11﻿ минуту.
Сейчас Катя на парковочном этаже, планирует свой маршрут. Коллег можно посетить в любом порядке, но один из них покинет офис через ﻿tt﻿ минут. С парковочного этажа лестницы нет — только лифт, на котором можно подняться на любой этаж.
В итоге план Кати следующий:
Подняться на лифте на произвольный этаж. Считается, что лифт поднимается на любой этаж за ﻿00﻿ минут.
Передать всем коллегам договоры, перемещаясь между этажами по лестнице. Считается, что договоры на этаже передаются мгновенно.
В первые ﻿tt﻿ минут передать договор тому коллеге, который планирует уйти.
Пройти минимальное количество лестничных пролетов.
Помогите Кате выполнить все пункты ее плана.
Формат входных данных
В первой строке вводятся целые положительные числа ﻿n﻿ и ﻿t﻿ ﻿(2\leq n,t \leq 100)(2≤n,t≤100)﻿ — количество сотрудников и время, когда один из сотрудников покинет офис (в минутах). В следующей строке n чисел — номера этажей, на которых находятся сотрудники. Все числа различны и по абсолютной величине не превосходят 100. Номера этажей даны в порядке возрастания. В следующей строке записан номер сотрудника, который уйдет через t минут.
Формат выходных данных
Выведите одно число — минимально возможное число лестничных пролетов, которое понадобится пройти Кате.
Замечание
В первом примере времени достаточно, чтобы Катя поднялась по этажам по порядку.
Во втором примере Кате понадобится подняться к уходящему сотруднику, а потом пройти всех остальных — например, в порядке ﻿\{1,2,3,4,6\}{1,2,3,4,6}*/

/*PT. Пройденные тесты	43. */
  
import java.util.Scanner;

public class Main {

public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);

    int n = scanner.nextInt();
    int t = scanner.nextInt();

    int[] floors = new int[n];
    for (int i = 0; i < n; i++) {
        floors[i] = scanner.nextInt();
    }

    int leave = scanner.nextInt();

    int res = 0;
    if (floors[leave-1] - 1 > t) {
        if (floors[n-1] - floors[leave-1] < floors[leave-1] - floors[0]) {
            res += floors[n-1] - floors[leave-1];
        }
        else {
            res += floors[leave-1] - floors[0];
        }
    }
    res += floors[n-1] - floors[0];
    
    System.out.println(res);
}
}
