'''На физкультуре происходит разбиение по двум командам. Ребята выстроены в шеренгу, у каждого из них есть свой рост ﻿a_ia i​ ﻿ Разбиение по командам произойдет по принципу «четный-нечетный» — все школьники с четным ростом отправляются в одну команду, а нечетные — в другую.
В отличие от привычного урока, ребята не выстроились по росту. Вместо привычного порядка они встали случайно. Теперь физрук Яша смотрит на шеренгу и думает — может ли ровно одна пара учеников поменяться местами так, чтобы команды оказались такими же, как и по принципу «первый-второй». Иначе говоря, он хочет получить такой порядок, при котором все ученики с четным ростом стоят на четных позициях, а с нечетным — на нечетных.
Помогите Яше найти нужную замену.


Формат входных данных
В первой строке находится число ﻿n(2 \leq n \leq 1000)n(2≤n≤1000)﻿ — количество учеников в шеренге. 
В следующей строке находится ﻿nn﻿ натуральных чисел ﻿a_i(1\leq a_i \leq 10^9)a i​ (1≤a i​ ≤10 9 )﻿ — рост учеников.


Формат выходных данных
В единственной строке выведите ﻿ii﻿ и ﻿jj﻿ — номера элементов, которые нужно поменять местами, чтобы добиться заданного условия ﻿(1 \leq i , j \leq n , i \ne j)(1≤i,j≤n,i ​ =j)﻿. Если ответов несколько — разрешается вывести любой. 
Если не существует способа поменять два элемента местами — выведите ﻿-1 -1−1−1﻿.


Замечания 
В первом примере хотя бы один ученик с четным ростом будет стоять на нечетной позиции. Во втором тесте замена приведет к неправильному состоянию.
В третьем тесте из условия замена приведет шеренгу к валидному состоянию ﻿[1,2][1,2]﻿.
'''

#PT. Пройденные тесты 3.

def function():
    pupils_num = int(input())
    pupils_heights = [int(x) for x in input().split()][:pupils_num]

    wrong_odds = []
    wrong_evens = []

    for i in range(len(pupils_heights)):
        if  (i + 1) % 2 == 0 and pupils_heights[i] % 2 != 0:
            wrong_evens.append(pupils_heights[i])
        elif  (i + 1) % 2 != 0 and pupils_heights[i] % 2 == 0:
            wrong_odds.append(pupils_heights[i])

    predicts = [
        wrong_evens == [],
        wrong_odds == [],
        len(wrong_odds) > 1,
        len(wrong_evens) > 1,
    ]

    for predict in predicts:
        if predict:
            return "-1 -1"

    return "{0} {1}".format(wrong_evens[0], wrong_odds[0])


if __name__ == "__main__":
    print(function())
